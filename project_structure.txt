
📂 Exploring `.github/workflows` directory:
======================================================================
📄 deploy.yml
─── Content:
--------------------------------------------------
name: Deploy to EC2

on:
  push:
    branches: [main]  # or your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 Host to Known Hosts
      run: ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy via SSH
      run: |
        ssh ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/my-product-crud-app
          git pull origin main
          npm install
          pm2 restart next-app || pm2 start npm --name "next-app" -- start
          pm2 save
        EOF
--------------------------------------------------


📂 Exploring `utils` directory:
======================================================================
📄 mongodb.js
─── Content:
--------------------------------------------------
import { MongoClient } from 'mongodb';

const uri = process.env.MONGODB_URI;
if (!uri) throw new Error('MONGODB_URI missing');

let clientPromise;
if (!global._mongoClient) {
  global._mongoClient = new MongoClient(uri).connect();
}
clientPromise = global._mongoClient;

export default clientPromise;
--------------------------------------------------

📄 s3.js
─── Content:
--------------------------------------------------
import AWS from 'aws-sdk';

AWS.config.update({
  region: process.env.AWS_REGION,
});

const s3 = new AWS.S3();

export default s3;
--------------------------------------------------


📂 Exploring `pages` directory:
======================================================================
📄 _app.js
─── Content:
--------------------------------------------------
import "@/styles/globals.css";

export default function App({ Component, pageProps }) {
  return <Component {...pageProps} />;
}
--------------------------------------------------

📄 _document.js
─── Content:
--------------------------------------------------
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}
--------------------------------------------------

📁 api/
│   📁 products/
│   │   📄 [id].js
│   │   ─── Content:
│   │   --------------------------------------------------
│   │   import nextConnect from 'next-connect';
│   │   import clientPromise from '@/utils/mongodb';
│   │   import { ObjectId } from 'mongodb';
│   │   
│   │   const handler = nextConnect();
│   │   
│   │   handler.put(async (req, res) => {
│   │     const client = await clientPromise;
│   │     const { id } = req.query;
│   │     await client.db('cruddb').collection('products')
│   │       .updateOne({ _id: new ObjectId(id) }, { $set: req.body });
│   │     res.json({ success: true });
│   │   });
│   │   
│   │   handler.delete(async (req, res) => {
│   │     const client = await clientPromise;
│   │     const { id } = req.query;
│   │     await client.db('cruddb').collection('products')
│   │       .deleteOne({ _id: new ObjectId(id) });
│   │     res.json({ success: true });
│   │   });
│   │   
│   │   export default handler;
│   │   --------------------------------------------------

│   │   📄 index.js
│   │   ─── Content:
│   │   --------------------------------------------------
│   │   import nextConnect from 'next-connect';
│   │   import clientPromise from '@/utils/mongodb';
│   │   
│   │   const handler = nextConnect();
│   │   
│   │   handler.get(async (_, res) => {
│   │     const client = await clientPromise;
│   │     const products = await client.db('cruddb').collection('products').find().toArray();
│   │     res.json(products);
│   │   });
│   │   
│   │   handler.post(async (req, res) => {
│   │     const client = await clientPromise;
│   │     const result = await client.db('cruddb').collection('products').insertOne(req.body);
│   │     res.status(201).json(result);
│   │   });
│   │   
│   │   export default handler;
│   │   --------------------------------------------------

│   📄 upload.js
│   ─── Content:
│   --------------------------------------------------
│   import nextConnect from 'next-connect';
│   import multer from 'multer';
│   import aws from 'aws-sdk';
│   import multerS3 from 'multer-s3';
│   
│   const s3 = new aws.S3({
│     accessKeyId: process.env.AWS_ACCESS_KEY_ID,
│     secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
│     region: process.env.AWS_REGION
│   });
│   
│   const upload = multer({
│     storage: multerS3({
│       s3,
│       bucket: process.env.AWS_BUCKET_NAME,
│       acl: 'public-read',
│       key: (req, file, cb) => cb(null, `products/${Date.now()}-${file.originalname}`)
│     })
│   });
│   
│   const handler = nextConnect({
│     onError(err, req, res) {
│       res.status(500).json({ error: err.message });
│     }
│   }).use(upload.single('file'));
│   
│   handler.post((req, res) => {
│     res.status(200).json({ url: req.file.location });
│   });
│   
│   export const config = { api: { bodyParser: false } };
│   export default handler;
│   --------------------------------------------------

📄 index.js
─── Content:
--------------------------------------------------
import { useEffect, useState } from 'react';

export default function Home() {
  const [products, setProducts] = useState([]);
  const [form, setForm] = useState({ name: '', price: '', image: '' });
  const [file, setFile] = useState(null);
  const [editId, setEditId] = useState(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => { fetchProducts(); }, []);

  async function fetchProducts() {
    const res = await fetch('/api/products');
    setProducts(await res.json());
  }

  async function uploadImage() {
    if (!file) return form.image;
    const data = new FormData();
    data.append('file', file);
    const res = await fetch('/api/upload', { method: 'POST', body: data });
    if (!res.ok) throw new Error('Image upload failed');
    return (await res.json()).url;
  }

  async function handleSubmit(e) {
    e.preventDefault();
    setLoading(true);
    try {
      const imageUrl = await uploadImage();
      const payload = { name: form.name, price: form.price, image: imageUrl };

      if (editId) {
        await fetch(`/api/products/${editId}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
      } else {
        await fetch(`/api/products`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload),
        });
      }

      setForm({ name: '', price: '', image: '' });
      setFile(null);
      setEditId(null);
      await fetchProducts();
    } catch (err) {
      console.error(err);
    } finally {
      setLoading(false);
    }
  }

  async function handleDelete(id) {
    await fetch(`/api/products/${id}`, { method: 'DELETE' });
    fetchProducts();
  }

  function handleEdit(product) {
    setForm({ name: product.name, price: product.price, image: product.image });
    setEditId(product._id);
  }

  function handleFileChange(e) {
    setFile(e.target.files?.[0] || null);
  }

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <div className="max-w-3xl mx-auto bg-white p-6 rounded shadow">
        <h1 className="text-2xl font-bold mb-4 text-center">Product Manager</h1>

        <form onSubmit={handleSubmit} className="space-y-4 mb-8">
          <div>
            <label className="block mb-1 font-medium">Name</label>
            <input
              type="text"
              className="w-full p-2 border rounded"
              value={form.name}
              onChange={e => setForm({ ...form, name: e.target.value })}
              required
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">Price</label>
            <input
              type="number"
              className="w-full p-2 border rounded"
              value={form.price}
              onChange={e => setForm({ ...form, price: e.target.value })}
              required
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">Image</label>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileChange}
              className="w-full"
            />
            {(form.image || file) && (
              <img
                src={file ? URL.createObjectURL(file) : form.image}
                alt="Preview"
                className="w-24 h-24 mt-2 object-cover rounded"
              />
            )}
          </div>
          <button
            type="submit"
            className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Saving...' : editId ? 'Update Product' : 'Add Product'}
          </button>
        </form>

        <h2 className="text-xl font-semibold mb-4">
          {products.length} Products
        </h2>

        <div className="space-y-4">
          {products.map(product => (
            <div
              key={product._id}
              className="border p-4 rounded bg-gray-50 flex justify-between items-center"
            >
              <div className="flex items-center space-x-4">
                {product.image && (
                  <img
                    src={product.image}
                    alt={product.name}
                    className="w-16 h-16 object-cover rounded"
                  />
                )}
                <div>
                  <p className="font-bold">{product.name}</p>
                  <p className="text-blue-700 font-semibold">${product.price}</p>
                </div>
              </div>
              <div className="space-x-2">
                <button
                  onClick={() => handleEdit(product)}
                  className="text-sm px-3 py-1 bg-yellow-400 rounded hover:bg-yellow-500"
                >
                  Edit
                </button>
                <button
                  onClick={() => handleDelete(product._id)}
                  className="text-sm px-3 py-1 bg-red-500 text-white rounded hover:bg-red-600"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
--------------------------------------------------

📄 upload.js
─── Content:
--------------------------------------------------
import s3 from '@/utils/s3';
import formidable from 'formidable';
import fs from 'fs';
import { v4 as uuidv4 } from 'uuid';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();

  const form = new formidable.IncomingForm();

  form.parse(req, async (err, fields, files) => {
    if (err) {
      console.error('Form parse error:', err);
      return res.status(500).json({ error: 'Error parsing file' });
    }

    const file = files.file;

    if (!file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const fileContent = fs.readFileSync(file.filepath);
    const fileExtension = file.originalFilename.split('.').pop();
    const s3Key = `uploads/${uuidv4()}.${fileExtension}`;

    const params = {
      Bucket: process.env.AWS_S3_BUCKET,
      Key: s3Key,
      Body: fileContent,
      ContentType: file.mimetype,
      ACL: 'public-read',
    };

    try {
      const data = await s3.upload(params).promise();
      res.status(200).json({ url: data.Location });
    } catch (uploadError) {
      console.error('S3 Upload Error:', uploadError);
      res.status(500).json({ error: 'Failed to upload file' });
    }
  });
}
--------------------------------------------------


📂 Exploring `pages/api` directory:
======================================================================
📁 products/
│   📄 [id].js
│   ─── Content:
│   --------------------------------------------------
│   import nextConnect from 'next-connect';
│   import clientPromise from '@/utils/mongodb';
│   import { ObjectId } from 'mongodb';
│   
│   const handler = nextConnect();
│   
│   handler.put(async (req, res) => {
│     const client = await clientPromise;
│     const { id } = req.query;
│     await client.db('cruddb').collection('products')
│       .updateOne({ _id: new ObjectId(id) }, { $set: req.body });
│     res.json({ success: true });
│   });
│   
│   handler.delete(async (req, res) => {
│     const client = await clientPromise;
│     const { id } = req.query;
│     await client.db('cruddb').collection('products')
│       .deleteOne({ _id: new ObjectId(id) });
│     res.json({ success: true });
│   });
│   
│   export default handler;
│   --------------------------------------------------

│   📄 index.js
│   ─── Content:
│   --------------------------------------------------
│   import nextConnect from 'next-connect';
│   import clientPromise from '@/utils/mongodb';
│   
│   const handler = nextConnect();
│   
│   handler.get(async (_, res) => {
│     const client = await clientPromise;
│     const products = await client.db('cruddb').collection('products').find().toArray();
│     res.json(products);
│   });
│   
│   handler.post(async (req, res) => {
│     const client = await clientPromise;
│     const result = await client.db('cruddb').collection('products').insertOne(req.body);
│     res.status(201).json(result);
│   });
│   
│   export default handler;
│   --------------------------------------------------

📄 upload.js
─── Content:
--------------------------------------------------
import nextConnect from 'next-connect';
import multer from 'multer';
import aws from 'aws-sdk';
import multerS3 from 'multer-s3';

const s3 = new aws.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION
});

const upload = multer({
  storage: multerS3({
    s3,
    bucket: process.env.AWS_BUCKET_NAME,
    acl: 'public-read',
    key: (req, file, cb) => cb(null, `products/${Date.now()}-${file.originalname}`)
  })
});

const handler = nextConnect({
  onError(err, req, res) {
    res.status(500).json({ error: err.message });
  }
}).use(upload.single('file'));

handler.post((req, res) => {
  res.status(200).json({ url: req.file.location });
});

export const config = { api: { bodyParser: false } };
export default handler;
--------------------------------------------------

